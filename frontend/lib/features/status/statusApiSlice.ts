// Need to use the React-specific entry point to import `createApi`
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";

interface Quote {
    id: number;
    quote: string;
    author: string;
}

interface StatusApiResponse {
    value: string
    label: string
    icon: string
}

// Define a service using a base URL and expected endpoints
export const statusApiSlice = createApi({
    baseQuery: fetchBaseQuery({ baseUrl: "http://localhost:8080/api/status" }),
    reducerPath: "statusApi",
    // Tag types are used for caching and invalidation.
    tagTypes: ["Statuses"],
    endpoints: (build) => ({
        // Supply generics for the return type (in this case `QuotesApiResponse`)
        // and the expected query argument. If there is no argument, use `void`
        // for the argument type instead.
        //build.query<ResponseDelBackend, parametro url que queramos enviar>
        //luego cuando ejecutemos query: (parametroURl) especificado del tipo de arriba obviamente
        getStatus: build.query<StatusApiResponse[], void>({
            query: () => ``,
            // `providesTags` determines which 'tag' is attached to the
            // cached data returned by the query.
            providesTags: (result, error, id) => [{ type: "Statuses" }],
        }),
    }),
});

// Hooks are auto-generated by RTK-Query
// Same as `quotesApiSlice.endpoints.getQuotes.useQuery`
export const { useGetStatusQuery } = statusApiSlice;
