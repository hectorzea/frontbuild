// Need to use the React-specific entry point to import `createApi`
import { CardMatchResult } from "@/app/types";
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";

// Define a service using a base URL and expected endpoints
export const hearthstoneApiSlice = createApi({
  baseQuery: fetchBaseQuery({
    baseUrl: `${process.env.NEXT_PUBLIC_FRONTBUILD_HZ_SERVER_URL}/api/hearthstone/mulligan`,
  }),
  reducerPath: "hearthstoneApi",
  // Tag types are used for caching and invalidation.
  tagTypes: ["Hearthstone"],
  endpoints: (build) => ({
    // Supply generics for the return type (in this case `QuotesApiResponse`)
    // and the expected query argument. If there is no argument, use `void`
    // for the argument type instead.
    //build.query<ResponseDelBackend, parametro url que queramos enviar>
    //luego cuando ejecutemos query: (parametroURl) especificado del tipo de arriba obviamente
    getMulliganCardsMatchResult: build.query<
      CardMatchResult[],
      { classId: string; type: string }
    >({
      query: (arg) => {
        const { classId, type } = arg;
        return {
          url: ``,
          params: { classId, type },
        };
      },
      // `providesTags` determines which 'tag' is attached to the
      // cached data returned by the query.
      providesTags: () => [{ type: "Hearthstone" }],
    }),
  }),
});

// Hooks are auto-generated by RTK-Query
// Same as `quotesApiSlice.endpoints.getQuotes.useQuery`
export const { useGetMulliganCardsMatchResultQuery } = hearthstoneApiSlice;
